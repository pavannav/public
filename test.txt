

=============
variable "enable_psc_config" {
  description = "Enable Private Service Connect configuration in ip_configuration"
  type        = bool
  default     = false
}

variable "psc_allowed_consumer_projects" {
  description = "List of consumer projects allowed to connect via PSC"
  type        = list(string)
  default     = []
}

----------

    ip_configuration {
      ssl_mode                                      = ...
      ipv4_enabled                                  = false
      private_network                               = var.network
      enable_private_path_for_google_cloud_services = var.enable_private_path_for_google_cloud_services

      dynamic "psc_config" {
        for_each = var.enable_psc_config ? [1] : []
        content {
          allowed_consumer_projects = var.psc_allowed_consumer_projects
        }
      }

      dynamic "authorized_networks" {
        for_each = var.authorized_networks != null ? var.authorized_networks : {}
        iterator = network
        content {
          name  = network.key
          value = network.value
        }
      }
    }

==========
==========

variable "psc_config" {
  description = "PSC config for Cloud SQL. Set to null to disable."
  type = object({
    psc_enabled               = bool
    allowed_consumer_projects = list(string)
  })
  default = null
}

dynamic "psc_config" {
  for_each = var.psc_config != null && var.psc_config.psc_enabled ? [1] : []
  content {
    allowed_consumer_projects = var.psc_config.allowed_consumer_projects
  }
}



psc_config = {
  psc_enabled               = true
  allowed_consumer_projects = ["project-1-id", "project-2-id"]
}

====================
====================
dynamic "psc_config" {
  for_each = var.psc_config != null && var.psc_config.psc_enabled ? [1] : []
  content {
    # Only pass allowed_consumer_projects if it's not empty
    allowed_consumer_projects = length(var.psc_config.allowed_consumer_projects) > 0 ? var.psc_config.allowed_consumer_projects : null
  }
}

