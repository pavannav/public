variable "psc_enabled" {
  description = "Enable PSC for this SQL instance"
  type        = bool
  default     = false
}

variable "psc_allowed_consumer_projects" {
  description = "List of consumer projects allowed to access via PSC"
  type        = list(string)
  default     = []
}
------
ip_configuration {
  ipv4_enabled    = false
  private_network = var.network

  dynamic "psc_config" {
    for_each = var.psc_enabled ? [1] : []
    content {
      psc_enabled               = true
      allowed_consumer_projects = var.psc_allowed_consumer_projects
    }
  }
}

----------
module "sql" {
  source = "./modules/sql"

  psc_enabled = true
  psc_allowed_consumer_projects = ["project-1", "project-2"]
}


=================

Thanks for confirming. If your Cloud SQL instance is still getting both PSA and PSC enabled even after applying changes, here‚Äôs what‚Äôs likely happening ‚Äî and how to fix it with certainty:

üîç Problem Breakdown
In Google Cloud SQL, enabling PSC doesn't automatically disable PSA (i.e. access via VPC private IP or authorized networks). To enforce PSC-only, you must:

Feature	Disable if PSC is enabled
authorized_networks	‚úÖ Must not be set
enable_private_path_for_google_cloud_services	‚úÖ Must be false
ipv4_enabled	‚úÖ Already disabled (good)
psc_config.psc_enabled	‚úÖ Should be true
private_network	‚úÖ Required for PSC but does not enable PSA on its own

If authorized_networks is non-empty or enable_private_path_for_google_cloud_services is true, GCP will allow PSA (Private Service Access) along with PSC ‚Äî this is by design.

‚úÖ Final, Safe Fix
Update the entire ip_configuration block exactly as below:

hcl
Copy
Edit
ip_configuration {
  ssl_mode        = (
    local.psql_config == "ssl" ? "ENCRYPTED_ONLY" :
    local.psql_config == "mTLS" ? "TRUSTED_CLIENT_CERTIFICATE_REQUIRED" :
    "ENCRYPTED_ONLY"
  )

  ipv4_enabled    = false
  private_network = var.network

  # Explicitly disable PSA-related features when PSC is enabled
  enable_private_path_for_google_cloud_services = var.psc_enabled ? false : var.enable_private_path_for_google_cloud_services

  dynamic "authorized_networks" {
    for_each = var.psc_enabled ? {} : (
      var.authorized_networks != null ? var.authorized_networks : {}
    )
    iterator = network
    content {
      name  = network.key
      value = network.value
    }
  }

  dynamic "psc_config" {
    for_each = var.psc_enabled ? [1] : []
    content {
      psc_enabled               = true
      allowed_consumer_projects = var.psc_allowed_consumer_projects
    }
  }
}

üõ°Ô∏è Add a Validation Rule (Strongly Recommended)
To prevent user error (e.g., someone enables PSC but still passes PSA configs), add this to the module:

h
Copy
Edit
locals {
  psa_psc_conflict = var.psc_enabled && (
    (var.authorized_networks != null && length(var.authorized_networks) > 0)
    || var.enable_private_path_for_google_cloud_services
  )
}

resource "null_resource" "fail_on_dual_access" {
  count = local.psa_psc_conflict ? 1 : 0

  provisioner "local-exec" {
    command = "echo '‚ùå ERROR: PSC is enabled, but PSA (authorized_networks or private_path) is also configured. Choose only one.' && exit 1"
  }
}
üîÅ Apply the Changes Again
Run:

bash
Copy
Edit
terraform apply
If GCP is still creating a PSA-enabled connection, it's likely due to:

A terraform state issue (try terraform taint google_sql_database_instance.primary)

GCP caching or inherited config (delete & recreate the instance manually to confirm)

A mistaken input ‚Äî double-check that psc_enabled = true and authorized_networks = null in your *.tfvars

‚úÖ Summary
To ensure PSC-only Cloud SQL, you must:

Step	Status
Disable ipv4_enabled	‚úÖ Done
Disable authorized_networks if psc_enabled = true	‚úÖ FIXED in this answer
Disable enable_private_path_for_google_cloud_services if psc_enabled = true	‚úÖ FIXED in this answer
Enable psc_config only when psc_enabled = true	‚úÖ Already correct
Add validation to block invalid config	‚úÖ Optional but recommended

Let me know if you'd like help creating a reusable module with this logic enforced.






enable_private_path_for_google_cloud_services = var.psc_enabled ? false : var.enable_private_path_for_google_cloud_services
=======
Unknown error. Original error message: Operation failed: VPC Access did not have permission to resolve the subnet or the provided subnet does not exist.

resource "google_compute_forwarding_rule" "sql_psc_endpoint" {
  count = var.psc_enabled ? 1 : 0

  name        = "${google_sql_database_instance.primary.name}-psc-endpoint"
  project     = var.psc_target_project
  region      = var.psc_target_region
  network     = var.network
  subnetwork  = var.psc_subnet
  ip_address  = var.psc_ip_address
  ip_protocol = "TCP"
  ports       = ["5432"]

  target = google_sql_database_instance.primary.psc_service_attachment[0].self_link
  purpose = "PRIVATE_SERVICE_CONNECT"
  load_balancing_scheme = "INTERNAL"

  depends_on = [module.psc_ip_reservation]
}
